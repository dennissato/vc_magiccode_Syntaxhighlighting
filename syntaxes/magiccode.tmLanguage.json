{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "MagicCode",
	"scopeName": "source.magiccode",
	"patterns": [
		{
			"include": "#irfb"
		},
		{
			"include": "#irfe"
		},
		{
			"include": "#normal"
		},
		{
			"name": "text",
			"match": "\\s+"
		}
	],
	"repository": {
		"irfb": {
			"patterns": [
				{
					"name": "magiccode.irfb",
					"begin": "(\/\/\/irfb start)",
					"beginCaptures": {
						"1": {
							"name": "magiccode.irfb.prefix.start"
						}
					},
					"end": "(\/\/\/irfb end)",
					"endCaptures": {
						"1": {
							"name": "magiccode.irfb.prefix.end"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#blockcomments"
						},
						{
							"include": "#preprocess"
						},
						{
							"include": "#irfb_enum_define"
						},
						{
							"include": "#irfb_struct_define"
						},
						{
							"include": "#irfb_function_define"
						},
						{
							"include": "#irfb_global_variable_define"
						},
						{
							"name": "invalid",
							"match": "."
						},
						{
							"name": "text",
							"match": "\\s+"
						}
					]
				}
			]
		},
		"normal": {
			"patterns": [
				{
					"name": "magiccode.normal",
					"begin": "^",
					"end": "\\z|(?=\/\/\/irfb start)",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#blockcomments"
						},
						{
							"include": "#preprocess"
						},
						{
							"include": "#keywords"
						},
						{
							"include": "#strings"
						},
						{
							"include": "#enum"
						},
						{
							"include": "#struct"
						},
						{
							"include": "#case"
						},
						{
							"include": "#function_define"
						},
						{
							"include": "#variable_define"
						},
						{
							"include": "#function_call"
						},
						{
							"name": "magiccode.index.specify",
							"match": "[[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*\\s*:"
						},
						{
							"include": "#numerics"
						},
						{
							"name": "keyword.operator",
							"match": "--|\\+\\+|[-\\+\\*\\/!<>\\=]\\=?"
						},
						{
							"name": "magiccode.variable.address",
							"match": "&[[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\{\\};:\\.,<>=&]]*"
						},
						{
							"name": "mapper",
							"match": "[[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*"
						},
						{
							"name": "text",
							"match": "\\s+"
						},
						{
							"name": "magiccode.normal.semicoloncomma",
							"match": ";|,"
						}
					]
				}
			]
		},
		"irfe": {
			"patterns": [
				{
					"name": "magiccode.irfe",
					"begin": "(\/\/\/irfe start)",
					"beginCaptures": {
						"1": {
							"name": "magiccode.irfe.prefix.start"
						}
					},
					"end": "(\/\/\/irfe end)",
					"endCaptures": {
						"1": {
							"name": "magiccode.irfe.prefix.end"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#blockcomments"
						},
						{
							"include": "keywords"
						},
						{
							"include": "#builtin"
						},
						{
							"name": "keyword",
							"match": "\\b(void|int|float|string|enum|naming|struct|group|boxs|ref)\\b"
						},
						{
							"include": "#preprocess"
						},
						{
							"include": "#numerics"
						},
						{
							"include": "#strings"
						},
						{
							"name": "mapper",
							"match": "."
						},
						{
							"name": "text",
							"match": "\\s+"
						}
					]
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line",
					"begin": "\/\/",
					"beginCaptures": {
						"1": {
							"name": "comment.line"
						}
					},
					"end": "$"
				}
			]
		},
		"blockcomments": {
			"patterns": [
				{
					"name": "comment.block",
					"begin": "\/\\*",
					"beginCaptures": {
						"1": {
							"name": "comment.block"
						}
					},
					"end": "\\*\/"
				}
			]
		},
		"irfb_enum_define": {
			"patterns": [
				{
					"begin": "(enum|naming)\\s*([[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*)",
					"beginCaptures": {
						"1": {
							"name": "magiccode.irfb.enum"
						},
						"2": {
							"name": "magiccode.irfb.enum.ident"
						}
					},
					"end": "(;)|(?=\/\/\/irfb end)",
					"endCaptures": {
						"1": {
							"name": "magiccode.irfb.semicoloncomma"
						}
					},
					"patterns": [
						{
							"inlcue": "#comments"
						},
						{
							"inlcue": "#blockcomments"
						},
						{
							"name": "magiccode.enum.block",
							"begin": "({)",
							"beginCaptures": {
								"1": {
									"name": "magiccode.irfb.enum.block.start"
								}
							},
							"end": "(})(?=;)|(?=\/\/\/irfb end)",
							"endCaptures": {
								"1": {
									"name": "magiccode.irfb.enum.block.end"
								}
							},
							"patterns": [
								{
									"include": "#comments"
								},
								{
									"include": "#blockcomments"
								},
								{
									"match": "([[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*)\\s*=?\\s*(.*)(,)",
									"captures": {
										"1": {
											"name": "magiccode.irfb.enum.member"
										},
										"2": {
											"patterns": [
												{
													"include": "#numeric_integer"
												}
											]
										},
										"3": {
											"name": "magiccode.irfb.semicoloncomma"
										}
									}
								},
								{
									"include": "#irfb_invalid_space"
								}
							]
						},
						{
							"include": "#irfb_invalid_space"
						}
					]
				}
			]
		},
		"irfb_struct_define": {
			"patterns": [
				{
					"begin": "(struct|group)\\s+([[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*)",
					"beginCaptures": {
						"1": {
							"name": "magiccode.irfb.struct"
						},
						"2": {
							"name": "magiccode.irfb.struct.ident"
						}
					},
					"end": "(;)|(?=\/\/\/irfb end)",
					"endCaptures": {
						"1": {
							"name": "magiccode.irfb.semicoloncomma"
						}
					},
					"patterns": [
						{
							"name": "magiccode.struct.block",
							"begin": "({)",
							"beginCaptures": {
								"1": {
									"name": "magiccode.irfb.struct.block.start"
								}
							},
							"end": "(})(?=;)|(?=\/\/\/irfb end)",
							"endCaptures": {
								"1": {
									"name": "magiccode.irfb.struct.block.end"
								}
							},
							"patterns": [
								{
									"include": "#comments"
								},
								{
									"include": "#blockcomments"
								},
								{
									"match": "(ref\\s+)?(int|string|float|[[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*|boxs<(int|float|string)>)((\\[[a-zA-Z0-9_\\.]*\\])*)\\s+?([[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*)(;)",
									"captures": {
										"1": {
											"name": "magiccode.ref"
										},
										"2": {
											"name": "keyword"
										},
										"3": {
											"name": "magiccode.boxs.type"
										},
										"4": {
											"name": "magiccode.identdef.arraysize"
										},
										"6": {
											"name": "magiccode.identdef.ident"
										},
										"7": {
											"name": "magiccode.irfb.semicoloncomma"
										}
									}
								},
								{
									"include": "#irfb_invalid_space"
								}
							]
						},
						{
							"include": "#irfb_invalid_space"
						}
					]
				},
				{
					"include": "#comments"
				},
				{
					"include": "#blockcomments"
				}
			]
		},
		"irfb_global_variable_define": {
			"patterns": [
				{
					"include": "#irfb_variable_define"
				}
			]
		},
		"irfb_function_define": {
			"patterns": [
				{
					"name": "magiccode.irfb.function",
					"begin": "(void|int|string|float)\\s+([[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*)\\s*(\\()(.*)(\\))",
					"beginCaptures": {
						"1": {
							"name": "keyword"
						},
						"2": {
							"name": "magiccode.irfb.function.userdef"
						},
						"3": {
							"name": "magiccode.irfb.function.userdef"
						},
						"4": {
							"patterns": [
								{
									"include": "#variable_define"
								},
								{
									"name": "magiccode.function.define.comma",
									"match": ","
								},
								{
									"name": "invalid",
									"match": ".?"
								}
							]
						},
						"5": {
							"name": "magiccode.irfb.function.userdef"
						}
					},
					"end": "(?<=})|(?=\/\/\/irfb end)",
					"patterns": [
						{
							"name": "magiccode.irfb.function.block",
							"begin": "({)",
							"beginCaptures": {
								"1": {
									"name": "magiccode.irfb.function.block.start"
								}
							},
							"end": "(})|(?=\/\/\/irfb end)",
							"endCaptures": {
								"1": {
									"name": "magiccode.irfb.function.block.end"
								}
							},
							"patterns": [
								{
									"include": "#irfb_statement"
								},
								{
									"include": "#irfb_invalid_space"
								}
							]
						},
						{
							"include": "#irfb_invalid_space"
						}
					]
				}
			]
		},
		"irfb_statement": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#blockcomments"
				},
				{
					"include": "#irfb_for"
				},
				{
					"include": "#irfb_while"
				},
				{
					"include": "#irfb_if"
				},
				{
					"include": "#irfb_else"
				},
				{
					"include": "#irfb_return"
				},
				{
					"include": "#irfb_switch"
				},
				{
					"include": "#irfb_block"
				},
				{
					"include": "#irfb_function_call_only"
				},
				{
					"include": "#irfb_variable_define"
				},
				{
					"include": "#irfb_expression"
				},
				{
					"include": "#irfb_invalid_space"
				}
			]
		},
		"irfb_statement_roop": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#blockcomments"
				},
				{
					"include": "#irfb_for"
				},
				{
					"include": "#irfb_while"
				},
				{
					"include": "#irfb_if_roop"
				},
				{
					"include": "#irfb_else_roop"
				},
				{
					"include": "#irfb_return"
				},
				{
					"include": "#irfb_break"
				},
				{
					"include": "#irfb_continue"
				},
				{
					"include": "#irfb_switch_roop"
				},
				{
					"include": "#irfb_block_roop"
				},
				{
					"include": "#irfb_function_call_only"
				},
				{
					"include": "#irfb_variable_define"
				},
				{
					"include": "#irfb_expression"
				},
				{
					"include": "#irfb_invalid_space"
				}
			]
		},
		"irfb_for": {
			"patterns": [
				{
					"begin": "(for)\\b",
					"beginCaptures": {
						"1": {
							"name": "magiccode.irfb.for.keyword"
						}
					},
					"end": "(?<=})|(?=\/\/\/irfb end)",
					"patterns": [
						{
							"name": "magiccode.irfb.for.conditions",
							"begin": "(\\()(.*)(;)(.*)(;)(.*)(\\))",
							"beginCaptures": {
								"1": {
									"name": "magiccode.irfb.for.keyword"
								},
								"2": {
									"patterns": [
										{
											"match": "(ref\\s+)?(int|string|float|[[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]])(\\[.*\\])*\\s+?([[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*)(\\s*\\=\\s*.*)?",
											"captures": {
												"1": {
													"name": "magiccode.ref"
												},
												"2": {
													"name": "keyword"
												},
												"3": {
													"name": "magiccode.identdef.arraysize"
												},
												"4": {
													"name": "magiccode.identdef.ident"
												},
												"5": {
													"patterns": [
														{
															"include": "#irfb_conditions"
														}
													]
												}
											}
										},
										{
											"name": "invalid",
											"match": "."
										}
									]
								},
								"3": {
									"name": "magiccode.irfb.semicoloncomma"
								},
								"4": {
									"patterns": [
										{
											"include": "#irfb_function_call"
										},
										{
											"name": "mapper",
											"match": "."
										}
									]
								},
								"5": {
									"name": "magiccode.irfb.semicoloncomma"
								},
								"6": {
									"patterns": [
										{
											"include": "#irfb_function_call"
										},
										{
											"name": "mapper",
											"match": "."
										}
									]
								},
								"7": {
									"name": "magiccode.irfb.for.keyword"
								}
							},
							"end": "(?<=})|(?=\/\/\/irfb end)",
							"patterns": [
								{
									"name": "magiccode.irfb.for.block",
									"begin": "({)",
									"beginCaptures": {
										"1": {
											"name": "magiccode.irfb.for.block.start"
										}
									},
									"end": "(})",
									"endCaptures": {
										"1": {
											"name": "magiccode.irfb.for.block.end"
										}
									},
									"patterns": [
										{
											"include": "#irfb_statement_roop"
										}
									]
								}
							]
						},
						{
							"include": "#irfb_invalid_space"
						}
					]
				}
			]
		},
		"irfb_while": {
			"patterns": [
				{
					"begin": "(while)\\b",
					"beginCaptures": {
						"1": {
							"name": "magiccode.irfb.while.keyword"
						}
					},
					"end": "(?<=})|(?=\/\/\/irfb end)",
					"patterns": [
						{
							"begin": "(\\()(.*)(\\))",
							"beginCaptures": {
								"1": {
									"name": "magiccode.irfb.while.keyword"
								},
								"2": {
									"patterns": [
										{
											"include": "#irfb_conditions"
										}
									]
								},
								"3": {
									"name": "magiccode.irfb.while.keyword"
								}
							},
							"end": "(?<=})|(?=\/\/\/irfb end)",
							"patterns": [
								{
									"begin": "({)",
									"beginCaptures": {
										"1": {
											"name": "magiccode.irfb.while.block.start"
										}
									},
									"end": "(})",
									"endCaptures": {
										"1": {
											"name": "magiccode.irfb.while.block.end"
										}
									},
									"patterns": [
										{
											"include": "#irfb_statement_roop"
										}
									]
								}
							]
						},
						{
							"include": "#irfb_invalid_space"
						}
					]
				}
			]
		},
		"irfb_if": {
			"begin": "(if|else if)\\b",
			"beginCaptures": {
				"1": {
					"name": "magiccode.irfb.if.keyword"
				}
			},
			"end": "(?<=})|(?=\/\/\/irfb end)",
			"patterns": [
				{
					"begin": "(\\()(.*)(\\))",
					"beginCaptures": {
						"1": {
							"name": "magiccode.irfb.if.keyword"
						},
						"2": {
							"patterns": [
								{
									"include": "#irfb_conditions"
								}
							]
						},
						"3": {
							"name": "magiccode.irfb.if.keyword"
						}
					},
					"end": "(?<=})|(?=\/\/\/irfb end)",
					"patterns": [
						{
							"begin": "({)",
							"beginCaptures": {
								"1": {
									"name": "magiccode.irfb.if.block.start"
								}
							},
							"end": "(})|(?=\/\/\/irfb end)",
							"endCaptures": {
								"1": {
									"name": "magiccode.irfb.if.block.end"
								}
							},
							"patterns": [
								{
									"include": "#irfb_statement"
								}
							]
						},
						{
							"include": "#irfb_invalid_space"
						}
					]
				},
				{
					"include": "#irfb_invalid_space"
				}
			]
		},
		"irfb_if_roop": {
			"begin": "(if|else if)\\b",
			"beginCaptures": {
				"1": {
					"name": "magiccode.irfb.if.keyword"
				}
			},
			"end": "(?<=})|(?=\/\/\/irfb end)",
			"patterns": [
				{
					"begin": "(\\()(.*)(\\))",
					"beginCaptures": {
						"1": {
							"name": "magiccode.irfb.if.keyword"
						},
						"2": {
							"patterns": [
								{
									"include": "#irfb_conditions"
								}
							]
						},
						"3": {
							"name": "magiccode.irfb.if.keyword"
						}
					},
					"end": "(?<=})|(?=\/\/\/irfb end)",
					"patterns": [
						{
							"begin": "({)",
							"beginCaptures": {
								"1": {
									"name": "magiccode.irfb.if.block.start"
								}
							},
							"end": "(})|(?=\/\/\/irfb end)",
							"endCaptures": {
								"1": {
									"name": "magiccode.irfb.if.block.end"
								}
							},
							"patterns": [
								{
									"include": "#irfb_statement_roop"
								}
							]
						},
						{
							"include": "#irfb_invalid_space"
						}
					]
				},
				{
					"include": "#irfb_invalid_space"
				}
			]
		},
		"irfb_else": {
			"begin": "(else)\\b",
			"beginCaptures": {
				"1": {
					"name": "magiccode.irfb.else.keyword"
				}
			},
			"end": "(?<=})|(?=\/\/\/irfb end)",
			"patterns": [
				{
					"begin": "({)",
					"beginCaptures": {
						"1": {
							"name": "magiccode.irfb.else.block.start"
						}
					},
					"end": "(})|(?=\/\/\/irfb end)",
					"endCaptures": {
						"1": {
							"name": "magiccode.irfb.else.block.end"
						}
					},
					"patterns": [
						{
							"include": "#irfb_statement"
						}
					]
				},
				{
					"include": "#irfb_invalid_space"
				}
			]
		},
		"irfb_else_roop": {
			"begin": "(else)\\b",
			"beginCaptures": {
				"1": {
					"name": "magiccode.irfb.else.keyword"
				}
			},
			"end": "(?<=})|(?=\/\/\/irfb end)",
			"patterns": [
				{
					"begin": "({)",
					"beginCaptures": {
						"1": {
							"name": "magiccode.irfb.else.block.start"
						}
					},
					"end": "(})|(?=\/\/\/irfb end)",
					"endCaptures": {
						"1": {
							"name": "magiccode.irfb.else.block.end"
						}
					},
					"patterns": [
						{
							"include": "#irfb_statement_roop"
						}
					]
				},
				{
					"include": "#irfb_invalid_space"
				}
			]
		},
		"irfb_return": {
			"patterns": [
				{
					"name": "magiccode.irfb.return",
					"begin": "(return)\\b",
					"beginCaptures": {
						"1": {
							"name": "keyword"
						}
					},
					"end": "(;)|(?=\/\/\/irfb end)",
					"endCaptures": {
						"1": {
							"name": "magiccode.irfb.semicoloncomma"
						}
					},
					"patterns": [
						{
							"include": "#irfb_expression_primary"
						}
					]
				}
			]
		},
		"irfb_switch": {
			"patterns": [
				{
					"begin": "(switch)\\b",
					"beginCaptures": {
						"1": {
							"name": "magiccode.irfb.switch.keyword"
						}
					},
					"end": "(?<=})|(?=\/\/\/irfb end)",
					"patterns": [
						{
							"begin": "(\\()(.*)(\\))",
							"beginCaptures": {
								"1": {
									"name": "magiccode.irfb.switch.keyword"
								},
								"2": {
									"patterns": [
										{
											"include": "#irfb_conditions"
										}
									]
								},
								"3": {
									"name": "magiccode.irfb.switch.keyword"
								}
							},
							"end": "(?<=})|(?=\/\/\/irfb end)",
							"patterns": [
								{
									"begin": "({)",
									"beginCaptures": {
										"1": {
											"name": "magiccode.irfb.switch.block.start"
										}
									},
									"end": "(})",
									"endCaptures": {
										"1": {
											"name": "magiccode.irfb.switch.block.end"
										}
									},
									"patterns": [
										{
											"name": "magiccode.irefb.switch.case",
											"match": "(case)\\s+(.*)\\s*(:)",
											"captures": {
												"1": {
													"name": "keyword"
												},
												"2": {
													"patterns": [
														{
															"include": "#numerics"
														},
														{
															"include": "#variable_enum"
														}
													]
												},
												"3": {
													"name": "keyword"
												}
											}
										},
										{
											"match": "(default)\\s*:",
											"captures": {
												"1": {
													"name": "keyword"
												}
											}
										},
										{
											"include": "#irfb_break"
										},
										{
											"include": "#irfb_statement"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		"irfb_switch_roop": {
			"patterns": [
				{
					"begin": "(switch)\\b",
					"beginCaptures": {
						"1": {
							"name": "magiccode.irfb.switch.keyword"
						}
					},
					"end": "(?<=})|(?=\/\/\/irfb end)",
					"patterns": [
						{
							"begin": "(\\()(.*)(\\))",
							"beginCaptures": {
								"1": {
									"name": "magiccode.irfb.switch.keyword"
								},
								"2": {
									"patterns": [
										{
											"include": "#irfb_conditions"
										}
									]
								},
								"3": {
									"name": "magiccode.irfb.switch.keyword"
								}
							},
							"end": "(?<=})|(?=\/\/\/irfb end)",
							"patterns": [
								{
									"begin": "({)",
									"beginCaptures": {
										"1": {
											"name": "magiccode.irfb.switch.block.start"
										}
									},
									"end": "(})",
									"endCaptures": {
										"1": {
											"name": "magiccode.irfb.switch.block.end"
										}
									},
									"patterns": [
										{
											"name": "magiccode.irefb.switch.case",
											"match": "(case)\\s+(.*)\\s*:",
											"captures": {
												"1": {
													"name": "keyword"
												},
												"2": {
													"patterns": [
														{
															"include": "#numerics"
														},
														{
															"include": "#variable_enum"
														}
													]
												}
											}
										},
										{
											"match": "(default)\\s*:",
											"captures": {
												"1": {
													"name": "keyword"
												}
											}
										},
										{
											"include": "#irfb_statement_roop"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		"irfb_block": {
			"begin": "({)",
			"beginCaptures": {
				"1": {
					"name": "magiccode.irfb.block.start"
				}
			},
			"end": "(})|(?=\/\/\/irfb end)",
			"endCaptures": {
				"1": {
					"name": "magiccode.irfb.block.end"
				}
			},
			"patterns": [
				{
					"include": "#irfb_statement"
				},
				{
					"include": "#irfb_invalid_space"
				}
			]
		},
		"irfb_block_roop": {
			"begin": "({)",
			"beginCaptures": {
				"1": {
					"name": "magiccode.irfb.block.start"
				}
			},
			"end": "(})|(?=\/\/\/irfb end)",
			"endCaptures": {
				"1": {
					"name": "magiccode.irfb.block.end"
				}
			},
			"patterns": [
				{
					"include": "#irfb_statement_roop"
				},
				{
					"include": "#irfb_invalid_space"
				}
			]
		},
		"irfb_function_call_only": {
			"patterns": [
				{
					"name": "magiccode.irfb.function.call.only",
					"begin": "([[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"patterns": [
								{
									"include": "#builtin"
								},
								{
									"name": "magiccode.irfb.function.call.userdef",
									"match": "([[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*)"
								}
							]
						},
						"2": {
							"name": "magiccode.irfb.function.call.keyword"
						}
					},
					"end": "(\\))(;)",
					"endCaptures": {
						"1": {
							"name": "magiccode.irfb.function.call.keyword"
						},
						"2": {
							"name": "magiccode.irfb.semicoloncomma"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#blockcomments"
						},
						{
							"include": "#irfb_expression_primary"
						},
						{
							"name": "magiccode.irfb.semicoloncomma",
							"match": ","
						},
						{
							"name": "invalid",
							"match": "."
						}
					]
				}
			]
		},
		"irfb_function_call": {
			"patterns": [
				{
					"name": "magiccode.irfb.function.call",
					"begin": "([[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:<>=&]]*)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"patterns": [
								{
									"include": "#builtin"
								},
								{
									"name": "magiccode.irfb.function.call.userdef",
									"match": "([[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*)"
								}
							]
						},
						"2": {
							"name": "magiccode.irfb.function.call.keyword"
						}
					},
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "magiccode.irfb.function.call.keyword"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#blockcomments"
						},
						{
							"include": "#irfb_expression_primary"
						},
						{
							"name": "magiccode.irfb.semicoloncomma",
							"match": ","
						},
						{
							"name": "invalid",
							"match": "."
						}
					]
				}
			]
		},
		"irfb_variable_define": {
			"patterns": [
				{
					"name": "magiccode.irfb.variable.define",
					"begin": "(ref\\s+)?(int|string|float|[[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*|boxs<(int|float|string)>)((\\[[[[:word:]|[:punct:]][^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*\\])*)\\s+?([[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*)",
					"beginCaptures": {
						"1": {
							"name": "magiccode.ref"
						},
						"2": {
							"name": "keyword"
						},
						"3": {
							"name": "magiccode.boxs.type"
						},
						"4": {
							"name": "magiccode.identdef.arraysize"
						},
						"6": {
							"name": "magiccode.identdef.ident"
						}
					},
					"end": "(;)|(?=\/\/\/irfb end)",
					"endCaptures": {
						"1": {
							"name": "magiccode.irfb.semicoloncomma"
						}
					},
					"patterns": [
						{
							"include": "#irfb_variable_init"
						},
						{
							"include": "#irfb_invalid_space"
						}
					]
				}
			]
		},
		"irfb_variable_init": {
			"patterns": [
				{
					"name": "magiccode.irfb.variable.init",
					"begin": "=",
					"end": "(?=;)|(?=\/\/\/irfb end)",
					"patterns": [
						{
							"name": "magiccode.irfb.variable.init.block",
							"begin": "({)",
							"beginCaptures": {
								"1": {
									"name": "magiccode.irfb.variable.init.block.start"
								}
							},
							"end": "(})|(?=\/\/\/irfb end)",
							"endCaptures": {
								"1": {
									"name": "magiccode.irfb.variable.init.block.end"
								}
							},
							"patterns": [
								{
									"include": "#irfb_variable_init_block"
								},
								{
									"name": "magiccode.index.specify",
									"match": "[[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*\\s*:"
								},
								{
									"include": "#strings"
								},
								{
									"include": "#numerics"
								},
								{
									"include": "#irfb_function_call"
								},
								{
									"include": "#irfb_variable"
								},
								{
									"name": "magiccode.irfb.semicoloncomma",
									"match": ","
								},
								{
									"name": "text",
									"match": "\\s+"
								}
							]
						},
						{
							"name": "magiccode.irfb.variable.init.notblock",
							"begin": "(?=[^{^\\s])",
							"end": "(?=;)",
							"patterns": [
								{
									"include": "#irfb_expression_primary"
								},
								{
									"include": "#irfb_invalid_space"
								}
							]
						},
						{
							"include": "#irfb_invalid_space"
						}
					]
				}
			]
		},
		"irfb_variable_init_block": {
			"patterns": [
				{
					"begin": "({)",
					"beginCaptures": {
						"1": {
							"name": "magiccode.irfb.variable.init.nestblock.start"
						}
					},
					"end": "(})(,)|(?=\/\/\/irfb end)",
					"endCaptures": {
						"1": {
							"name": "magiccode.irfb.variable.init.nestblock.end"
						},
						"2": {
							"name": "magiccode.irfb.semicoloncomma"
						}
					},
					"patterns": [
						{
							"include": "#irfb_variable_init_block"
						},
						{
							"name": "magiccode.index.specify",
							"match": "[[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*\\s*:"
						},
						{
							"include": "#strings"
						},
						{
							"include": "#numerics"
						},
						{
							"include": "#irfb_function_call"
						},
						{
							"include": "#irfb_variable"
						},
						{
							"name": "magiccode.irfb.semicoloncomma",
							"match": ","
						},
						{
							"name": "text",
							"match": "\\s+"
						}
					]
				}
			]
		},
		"irfb_variable": {
			"patterns": [
				{
					"name": "magiccode.irfb.stmt.variable",
					"match": "&?[[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:<>=&]]*(\\.|\\[([[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\)\\[\\],\\{\\};:<>=&]]+)\\]|[[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};\\.:<>=&]]*)*",
					"captures": {
						"2": {
							"patterns": [
								{
									"include": "#numerics"
								},
								{
									"name": "mapper",
									"match": "."
								}
							]
						}
					}
				}
			]
		},
		"irfb_expression": {
			"patterns": [
				{
					"name": "magiccode.irfb.expression",
					"begin": "(?=[[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:<>=&]])",
					"end": "(;)|(?=\/\/\/irfb end)",
					"endCaptures": {
						"1": {
							"name": "magiccode.irfb.semicoloncomma"
						}
					},
					"patterns": [
						{
							"include": "#irfb_function_call"
						},
						{
							"match": "([[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\{\\};:,<>=&]]*)\\s*([-\\+\\*\\/]?\\=)\\s*(.*)(?=;)",
							"captures": {
								"2": {
									"name": "keyword.operator"
								},
								"3": {
									"patterns": [
										{
											"include": "#irfb_expression_primary"
										}
									]
								}
							}
						},
						{
							"match": "[[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*(--|\\+\\+)(?=;)",
							"captures": {
								"1": {
									"name": "keyword.operator"
								},
								"2": {
									"name": "magiccode.irfb.semicoloncomma"
								}
							}
						},
						{
							"include": "#irfb_invalid_space"
						}
					]
				}
			]
		},
		"irfb_expression_primary": {
			"patterns": [
				{
					"include": "#numerics"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#irfb_function_call"
				},
				{
					"include": "#irfb_variable"
				},
				{
					"name": "keyword.operator",
					"match": "--|\\+\\+|[-\\+\\*\\/!<>\\=]\\=?"
				},
				{
					"name": "mapper",
					"match": "\\[|\\]"
				},
				{
					"begin": "(\\()",
					"beginCaptures": {
						"1": {
							"name": "magiccode.expression.bracket.start.1"
						}
					},
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "magiccode.expression.bracket.end.1"
						}
					},
					"patterns": [
						{
							"include": "#irfb_expression_primary1"
						}
					]
				},
				{
					"name": "text",
					"match": "\\s+"
				}
			]
		},
		"irfb_expression_primary1": {
			"patterns": [
				{
					"include": "#numerics"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#irfb_function_call"
				},
				{
					"include": "#irfb_variable"
				},
				{
					"name": "keyword.operator",
					"match": "--|\\+\\+|[-\\+\\*\\/!<>\\=]\\=?"
				},
				{
					"begin": "(\\()",
					"beginCaptures": {
						"1": {
							"name": "magiccode.expression.bracket.start.2"
						}
					},
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "magiccode.expression.bracket.end.2"
						}
					},
					"patterns": [
						{
							"include": "#irfb_expression_primary2"
						}
					]
				},
				{
					"name": "text",
					"match": "\\s+"
				}
			]
		},
		"irfb_expression_primary2": {
			"patterns": [
				{
					"include": "#numerics"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#irfb_function_call"
				},
				{
					"include": "#irfb_variable"
				},
				{
					"name": "keyword.operator",
					"match": "--|\\+\\+|[-\\+\\*\\/!<>\\=]\\=?"
				},
				{
					"begin": "(\\()",
					"beginCaptures": {
						"1": {
							"name": "magiccode.expression.bracket.start.3"
						}
					},
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "magiccode.expression.bracket.end.3"
						}
					},
					"patterns": [
						{
							"include": "#irfb_expression_primary3"
						}
					]
				},
				{
					"name": "text",
					"match": "\\s+"
				}
			]
		},
		"irfb_expression_primary3": {
			"patterns": [
				{
					"include": "#numerics"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#irfb_function_call"
				},
				{
					"include": "#irfb_variable"
				},
				{
					"name": "keyword.operator",
					"match": "--|\\+\\+|[-\\+\\*\\/!<>\\=]\\=?"
				},
				{
					"begin": "(\\()",
					"beginCaptures": {
						"1": {
							"name": "magiccode.expression.bracket.start.4"
						}
					},
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "magiccode.expression.bracket.end.4"
						}
					},
					"patterns": [
						{
							"include": "#irfb_expression_primary"
						}
					]
				},
				{
					"name": "text",
					"match": "\\s+"
				}
			]
		},
		"irfb_invalid_space": {
			"patterns": [
				{
					"name": "invalid",
					"match": "."
				},
				{
					"name": "text",
					"match": "\\s+"
				}
			]
		},
		"irfb_break": {
			"patterns": [
				{
					"match": "(break)\\s*(;)",
					"captures": {
						"1": {
							"name": "keyword"
						},
						"2": {
							"name": "magiccode.irfb.semicoloncomma"
						}
					}
				}
			]
		},
		"irfb_continue": {
			"patterns": [
				{
					"match": "(continue)\\s*(;)",
					"captures": {
						"1": {
							"name": "keyword"
						},
						"2": {
							"name": "magiccode.irfb.semicoloncomma"
						}
					}
				}
			]
		},
		"irfb_conditions": {
			"patterns": [
				{
					"include": "#numerics"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#variable_enum"
				},
				{
					"include": "#irfb_invalid_space"
				}
			]
		},
		"preprocess": {
			"patterns": [
				{
					"name": "keyword",
					"match": "#(?:magic-onetime|magic-repeate|skill)\\b"
				},
				{
					"name": "magiccode.preprocess",
					"begin": "(#include|#main|#init)",
					"beginCaptures": {
						"1": {
							"name": "keyword"
						}
					},
					"end": "\\s*(\".*\")",
					"endCaptures": {
						"1": {
							"name": "string"
						}
					}
				}
			]
		},
		"enum": {
			"patterns": [
				{
					"match": "(enum|naming)\\s+([[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*)",
					"captures": {
						"1": {
							"name": "magiccode.enum"
						},
						"2": {
							"name": "magiccode.enum.ident"
						}
					}
				}
			]
		},
		"struct": {
			"patterns": [
				{
					"match": "(struct|group)\\s+([[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*)",
					"captures": {
						"1": {
							"name": "magiccode.struct"
						},
						"2": {
							"name": "magiccode.struct.ident"
						}
					}
				}
			]
		},
		"function_define": {
			"patterns": [
				{
					"name": "magiccode.function.define",
					"match": "(void|int|string|float)\\s+([[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*)\\s*(\\()(.*)(\\))",
					"captures": {
						"1": {
							"name": "keyword"
						},
						"2": {
							"name": "magiccode.function.userdef"
						},
						"4": {
							"patterns": [
								{
									"include": "#variable_define"
								},
								{
									"name": "magiccode.function.define.comma",
									"match": ","
								},
								{
									"name": "invalid",
									"match": ".?"
								}
							]
						}
					}
				}
			]
		},
		"function_call": {
			"patterns": [
				{
					"name": "magiccode.function.call",
					"begin": "([[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*)\\s*\\(",
					"beginCaptures": {
						"1": {
							"patterns": [
								{
									"include": "#builtin"
								},
								{
									"name": "magiccode.function.call.userdef",
									"match": "([[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*)"
								}
							]
						}
					},
					"end": "\\)",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#blockcomments"
						},
						{
							"include": "#function_call"
						},
						{
							"include": "#numerics"
						},
						{
							"include": "#strings"
						},
						{
							"name": "magiccode.function.call.comma",
							"match": ","
						},
						{
							"name": "mapper",
							"match": "."
						}
					]
				}
			]
		},
		"variable_define": {
			"patterns": [
				{
					"name": "magiccode.variable.define",
					"match": "(ref\\s+)?(int|string|float|[[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*|boxs<(int|float|string)>)((\\[[[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:<>=&]]*\\])*)\\s+?([[:^digit:]&&[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]][[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:\\.<>=&]]*)",
					"captures": {
						"1": {
							"name": "magiccode.ref"
						},
						"2": {
							"name": "keyword"
						},
						"3": {
							"name": "magiccode.boxs.type"
						},
						"4": {
							"name": "magiccode.identdef.arraysize"
						},
						"6": {
							"name": "magiccode.identdef.ident"
						}
					}
				}
			]
		},
		"case": {
			"patterns": [
				{
					"name": "magiccode.case",
					"match": "(case)\\s+(.*)\\s*:",
					"captures": {
						"1": {
							"name": "keyword"
						},
						"2": {
							"patterns": [
								{
									"include": "#numerics"
								},
								{
									"include": "#variable_enum"
								}
							]
						}
					}
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword",
					"match": "(while|for|switch|if|else|break|continue|return)\\b"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string",
					"begin": "\\s*\"",
					"end": "\""
				}
			]
		},
		"numeric_integer": {
			"patterns": [
				{
					"name": "constant.numeric",
					"match": "\\b0[xX][0-9a-fA-F]+\\b"
				},
				{
					"name": "constant.numeric",
					"match": "\\b0[bB][0-1_]+\\b"
				},
				{
					"name": "constant.numeric",
					"match": "\\b[+-]?\\d+\\b"
				}
			]
		},
		"numeric_float": {
			"patterns": [
				{
					"name": "constant.numeric",
					"match": "\\b[+-]?\\d+(?:(?:\\.\\d*)(F|f))\\b"
				}
			]
		},
		"numerics": {
			"patterns": [
				{
					"include": "#numeric_float"
				},
				{
					"include": "#numeric_integer"
				}
			]
		},
		"variable_enum": {
			"patterns": [
				{
					"match": "[[[:word:]|[:punct:]]&&[^-\\+\\*/\\(\\),\\[\\]\\{\\};:<>=&]]*"
				}
			]
		},
		"builtin": {
			"patterns": [
				{
					"include": "#buildtin_debug"
				},
				{
					"include": "#buildtin_gwst"
				},
				{
					"include": "#buildtin_sys"
				},
				{
					"include": "#buildtin_boxs"
				}
			]
		},
		"buildtin_debug": {
			"patterns": [
				{
					"name": "magiccode.builtin.debug",
					"match": "(debug)\\.(log|pause)",
					"captures": {
						"1": {
							"name": "magiccode.builtin.call.head"
						},
						"2": {
							"name": "magiccode.builtin.call.body1"
						}
					}
				}
			]
		},
		"buildtin_gwst": {
			"patterns": [
				{
					"name": "magiccode.builtin.gwst",
					"match": "(gwst)\\.(lib|mag|smag|wamag|ui|mep)",
					"captures": {
						"1": {
							"name": "magiccode.builtin.call.head"
						},
						"2": {
							"name": "magiccode.builtin.call.body1"
						}
					}
				}
			]
		},
		"buildtin_sys": {
			"patterns": [
				{
					"name": "magiccode.builtin.gwst",
					"match": "((sys)\\.(int|float)\\.(tostr))|((sys)\\.(string)\\.(toint))",
					"captures": {
						"2": {
							"name": "magiccode.builtin.call.head"
						},
						"3": {
							"name": "magiccode.builtin.call.body1"
						},
						"4": {
							"name": "magiccode.builtin.call.body2"
						},
						"6": {
							"name": "magiccode.builtin.call.head"
						},
						"7": {
							"name": "magiccode.builtin.call.body1"
						},
						"8": {
							"name": "magiccode.builtin.call.body2"
						}
					}
				}
			]
		},
		"buildtin_boxs": {
			"patterns": [
				{
					"name": "magiccode.builtin.gwst",
					"match": "(boxs)\\.(allocate|release)",
					"captures": {
						"1": {
							"name": "magiccode.builtin.call.head"
						},
						"2": {
							"name": "magiccode.builtin.call.body1"
						}
					}
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator",
					"match": "--|\\+\\+|[-\\+\\*\\/!<>\\=]\\=?"
				}
			]
		}
	}
}
